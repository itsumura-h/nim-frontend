/* Generated by the Nim Compiler v1.6.10 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI33554456 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI788529213 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555124 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1358954499 = {size: 0,kind: 43,base: null,node: null,finalizer: null};
var NTI1358954500 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555128 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555130 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555165 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554439 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI33554440 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555164 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555112 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555113 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555120 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555122 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI33555122 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555122.node = NNI33555122;
var NNI33555120 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555120.node = NNI33555120;
var NNI33555113 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555113.node = NNI33555113;
NTI33555164.base = NTI33555112;
NTI33555165.base = NTI33555112;
var NNI33555112 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555164, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554440, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554439, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554439, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555165, name: "up", sons: null}]};
NTI33555112.node = NNI33555112;
var NNI33555083 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555083.node = NNI33555083;
NTI33555112.base = NTI33555083;
NTI33555113.base = NTI33555112;
NTI33555120.base = NTI33555113;
NTI33555122.base = NTI33555120;
var NNI33555130 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555130.node = NNI33555130;
NTI33555130.base = NTI33555113;
var NNI33555128 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555128.node = NNI33555128;
NTI33555128.base = NTI33555113;
var NNI1358954500 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a0", len: 0, typ: NTI1358954499, name: "a0", sons: null}, 
{kind: 1, offset: "a1", len: 0, typ: NTI1358954499, name: "a1", sons: null}]};
NTI1358954500.node = NNI1358954500;
var NNI33555124 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555124.node = NNI33555124;
NTI33555124.base = NTI33555113;
var NNI788529213 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554456, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554456, name: "b", sons: null}]};
NTI788529213.node = NNI788529213;
                      var helper_1358954550 = new Uint32Array([3198944359, 3630892171]);

function makeNimstrLit(c_33556801) {
      var result = [];
  for (var i = 0; i < c_33556801.length; ++i) {
    result[i] = c_33556801.charCodeAt(i);
  }
  return result;
  

  
}

function mnewString(len_33556893) {
        return new Array(len_33556893);
  

  
}

function toJSStr(s_33556807) {
                    var Temporary5;
            var Temporary7;

  var result_33556808 = null;

    var res_33556842 = newSeq_33556825((s_33556807).length);
    var i_33556843 = 0;
    var j_33556844 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_33556843 < (s_33556807).length)) break Label2;
          var c_33556845 = s_33556807[i_33556843];
          if ((c_33556845 < 128)) {
          res_33556842[j_33556844] = String.fromCharCode(c_33556845);
          i_33556843 += 1;
          }
          else {
            var helper_33556857 = newSeq_33556825(0);
            Label3: do {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556858 = c_33556845.toString(16);
                  if ((((code_33556858) == null ? 0 : (code_33556858).length) == 1)) {
                  helper_33556857.push("%0");;
                  }
                  else {
                  helper_33556857.push("%");;
                  }
                  
                  helper_33556857.push(code_33556858);;
                  i_33556843 += 1;
                    if (((s_33556807).length <= i_33556843)) Temporary5 = true; else {                      Temporary5 = (s_33556807[i_33556843] < 128);                    }                  if (Temporary5) {
                  break Label3;
                  }
                  
                  c_33556845 = s_33556807[i_33556843];
                }
            } while (false);
++excHandler;
            Temporary7 = framePtr;
            try {
            res_33556842[j_33556844] = decodeURIComponent(helper_33556857.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            framePtr = Temporary7;
            res_33556842[j_33556844] = helper_33556857.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Temporary7;
            }
          }
          
          j_33556844 += 1;
        }
    } while (false);
    if (res_33556842.length < j_33556844) { for (var i = res_33556842.length ; i < j_33556844 ; ++i) res_33556842.push(null); }
               else { res_33556842.length = j_33556844; };
    result_33556808 = res_33556842.join("");

  return result_33556808;

}

function raiseException(e_33556667, ename_33556668) {
    e_33556667.name = ename_33556668;
    if ((excHandler == 0)) {
    unhandledException(e_33556667);
    }
    
    throw e_33556667;

  
}

function addInt(a_33556940, b_33556941) {
        var result = a_33556940 + b_33556941;
    checkOverflowInt(result);
    return result;
  

  
}

function chckRange(i_33557189, a_33557190, b_33557191) {
      var Temporary1;

  var result_33557192 = 0;

  BeforeRet: do {
      if (!(a_33557190 <= i_33557189)) Temporary1 = false; else {        Temporary1 = (i_33557189 <= b_33557191);      }    if (Temporary1) {
    result_33557192 = i_33557189;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_33557192;

}

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557140, src_33557141, ti_33557142) {
  var result_33557151 = null;

    switch (ti_33557142.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557131(ti_33557142))) {
      result_33557151 = src_33557141;
      }
      else {
        result_33557151 = [src_33557141[0], src_33557141[1]];
      }
      
      break;
    case 19:
            if (dest_33557140 === null || dest_33557140 === undefined) {
        dest_33557140 = {};
      }
      else {
        for (var key in dest_33557140) { delete dest_33557140[key]; }
      }
      for (var key in src_33557141) { dest_33557140[key] = src_33557141[key]; }
      result_33557151 = dest_33557140;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557142.base == null))) {
      result_33557151 = nimCopy(dest_33557140, src_33557141, ti_33557142.base);
      }
      else {
      if ((ti_33557142.kind == 17)) {
      result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {m_type: ti_33557142} : dest_33557140;
      }
      else {
        result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {} : dest_33557140;
      }
      }
      nimCopyAux(result_33557151, src_33557141, ti_33557142.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_33557141 === null) {
        result_33557151 = null;
      }
      else {
        if (dest_33557140 === null || dest_33557140 === undefined || dest_33557140.length != src_33557141.length) {
          dest_33557140 = new Array(src_33557141.length);
        }
        result_33557151 = dest_33557140;
        for (var i = 0; i < src_33557141.length; ++i) {
          result_33557151[i] = nimCopy(result_33557151[i], src_33557141[i], ti_33557142.base);
        }
      }
    
      break;
    case 28:
            if (src_33557141 !== null) {
        result_33557151 = src_33557141.slice(0);
      }
    
      break;
    default: 
      result_33557151 = src_33557141;
      break;
    }

  return result_33557151;

}

function chckIndx(i_33557184, a_33557185, b_33557186) {
      var Temporary1;

  var result_33557187 = 0;

  BeforeRet: do {
      if (!(a_33557185 <= i_33557184)) Temporary1 = false; else {        Temporary1 = (i_33557184 <= b_33557186);      }    if (Temporary1) {
    result_33557187 = i_33557184;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_33557184, a_33557185, b_33557186);
    }
    
  } while (false);

  return result_33557187;

}

function subInt(a_33556944, b_33556945) {
        var result = a_33556944 - b_33556945;
    checkOverflowInt(result);
    return result;
  

  
}

function nimMax(a_33556998, b_33556999) {
    var Temporary1;

  var result_33557000 = 0;

  BeforeRet: do {
    if ((b_33556999 <= a_33556998)) {
    Temporary1 = a_33556998;
    }
    else {
    Temporary1 = b_33556999;
    }
    
    result_33557000 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_33557000;

}

function nimMin(a_33556994, b_33556995) {
    var Temporary1;

  var result_33556996 = 0;

  BeforeRet: do {
    if ((a_33556994 <= b_33556995)) {
    Temporary1 = a_33556994;
    }
    else {
    Temporary1 = b_33556995;
    }
    
    result_33556996 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_33556996;

}
var ConstSet2 = setConstr(32, 9, 11, 13, 10, 12);

function addChar(x_33557255, c_33557256) {
    x_33557255.push(c_33557256);

  
}
var ConstSet3 = setConstr(32, 9, 11, 13, 10, 12);

function cstrToNimstr(c_33556804) {
      var ln = c_33556804.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_33556804.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_33556804.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var objectID_687866018 = [0];
var state_1358954509 = [{a0: 1773455756, a1: 4275166512}];
if (globalThis.utcInstance_1375733121 === undefined) {
  globalThis.utcInstance_1375733121 = [null];
}
if (globalThis.localInstance_1375733122 === undefined) {
  globalThis.localInstance_1375733122 = [null];
}

function toFloat_33556001(i_33556002) {
  var result_33556003 = 0.0;

    result_33556003 = i_33556002;

  return result_33556003;

}

function HEX2F_33557575(x_33557576, y_33557577) {
  var result_33557578 = 0.0;

    result_33557578 = (toFloat_33556001(x_33557576) / toFloat_33556001(y_33557577));

  return result_33557578;

}

function epochTime_1375735094() {
  var result_1375735095 = 0.0;

    result_1375735095 = HEX2F_33557575(new Date().getTime(), 1000);

  return result_1375735095;

}

function add_33556419(x_33556420, x_33556420_Idx, y_33556421) {
          if (x_33556420[x_33556420_Idx] === null) { x_33556420[x_33556420_Idx] = []; }
      var off = x_33556420[x_33556420_Idx].length;
      x_33556420[x_33556420_Idx].length += y_33556421.length;
      for (var i = 0; i < y_33556421.length; ++i) {
        x_33556420[x_33556420_Idx][off+i] = y_33556421.charCodeAt(i);
      }
    

  
}

function newSeq_33556825(len_33556827) {
  var result_33556828 = [];

    result_33556828 = new Array(len_33556827); for (var i = 0 ; i < len_33556827 ; ++i) { result_33556828[i] = null; }
  return result_33556828;

}

function unhandledException(e_33556663) {
    var buf_33556664 = [[]];
    if (!(((e_33556663.message).length == 0))) {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_33556664[0].push.apply(buf_33556664[0], e_33556663.message);;
    }
    else {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit(" ["));;
    add_33556419(buf_33556664, 0, e_33556663.name);
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("]\x0A"));;
    var cbuf_33556665 = toJSStr(buf_33556664[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556665);
  }
  else {
    throw cbuf_33556665;
  }
  

  
}

function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI33555122, name: null, trace: [], up: null}, "OverflowDefect");

  
}

function checkOverflowInt(a_33556938) {
        if (a_33556938 > 2147483647 || a_33556938 < -2147483648) raiseOverflow();
  

  
}

function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI33555130, name: null, trace: [], up: null}, "RangeDefect");

  
}

function addChars_251658415(result_251658417, result_251658417_Idx, x_251658418, start_251658419, n_251658420) {
    var old_251658421 = (result_251658417[result_251658417_Idx]).length;
    (result_251658417[result_251658417_Idx].length = chckRange(addInt(old_251658421, n_251658420), 0, 2147483647));
    Label1: do {
      var iHEX60gensym4_251658435 = 0;
      var i_1342177293 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1342177293 < n_251658420)) break Label3;
            iHEX60gensym4_251658435 = i_1342177293;
            result_251658417[result_251658417_Idx][chckIndx(addInt(old_251658421, iHEX60gensym4_251658435), 0, (result_251658417[result_251658417_Idx]).length - 1)] = x_251658418.charCodeAt(chckIndx(addInt(start_251658419, iHEX60gensym4_251658435), 0, (x_251658418).length - 1));
            i_1342177293 = addInt(i_1342177293, 1);
          }
      } while (false);
    } while (false);

  
}

function addChars_251658411(result_251658413, result_251658413_Idx, x_251658414) {
    addChars_251658415(result_251658413, result_251658413_Idx, x_251658414, 0, ((x_251658414) == null ? 0 : (x_251658414).length));

  
}

function addInt_251658436(result_251658437, result_251658437_Idx, x_251658438) {
    addChars_251658411(result_251658437, result_251658437_Idx, ((x_251658438) + ""));

  
}

function addInt_251658457(result_251658458, result_251658458_Idx, x_251658459) {
    addInt_251658436(result_251658458, result_251658458_Idx, x_251658459);

  
}

function HEX24_335544323(x_335544324) {
  var result_335544325 = [[]];

    addInt_251658457(result_335544325, 0, x_335544324);

  return result_335544325[0];

}

function isFatPointer_33557131(ti_33557132) {
  var result_33557133 = false;

  BeforeRet: do {
    result_33557133 = !((ConstSet1[ti_33557132.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_33557133;

}

function nimCopyAux(dest_33557144, src_33557145, n_33557146) {
    switch (n_33557146.kind) {
    case 0:
      break;
    case 1:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557146.sons.length; i++) {
      nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i]);
    }
    
      break;
    case 3:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
      for (var i = 0; i < n_33557146.sons.length; ++i) {
        nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i][1]);
      }
    
      break;
    }

  
}

function raiseIndexError(i_33556754, a_33556755, b_33556756) {
    var Temporary1;

    if ((b_33556756 < a_33556755)) {
    Temporary1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Temporary1 = (makeNimstrLit("index ") || []).concat(HEX24_335544323(i_33556754) || [],makeNimstrLit(" not in ") || [],HEX24_335544323(a_33556755) || [],makeNimstrLit(" .. ") || [],HEX24_335544323(b_33556756) || []);
    }
    
    raiseException({message: nimCopy(null, Temporary1, NTI33554439), parent: null, m_type: NTI33555128, name: null, trace: [], up: null}, "IndexDefect");

  
}

function rotl_1358954527(x_1358954528, k_1358954529) {
  var result_1358954530 = 0;

    result_1358954530 = ((x_1358954528 << k_1358954529) | (x_1358954528 >>> ((64 - k_1358954529) >>> 0)));

  return result_1358954530;

}

function next_1358954539(r_1358954540) {
  var result_1358954541 = 0;

    var s0_1358954542 = r_1358954540.a0;
    var s1_1358954543 = r_1358954540.a1;
    result_1358954541 = ((s0_1358954542 + s1_1358954543) >>> 0);
    s1_1358954543 = (s1_1358954543 ^ s0_1358954542);
    r_1358954540.a0 = ((rotl_1358954527(s0_1358954542, 55) ^ s1_1358954543) ^ (s1_1358954543 << 14));
    r_1358954540.a1 = rotl_1358954527(s1_1358954543, 36);

  return result_1358954541;

}

function skipRandomNumbers_1358954548(s_1358954549) {
    var s0_1358954551 = 0;
    var s1_1358954552 = 0;
    Label1: do {
      var i_1358954561 = 0;
      var res_1342177287 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_1342177287 <= 1)) break Label3;
            i_1358954561 = res_1342177287;
            Label4: do {
              var b_1358954566 = 0;
              var i_1342177285 = 0;
              Label5: do {
                  Label6: while (true) {
                  if (!(i_1342177285 < 64)) break Label6;
                    b_1358954566 = i_1342177285;
                    if (!(((helper_1358954550[chckIndx(i_1358954561, 0, (helper_1358954550).length - 1)] & (1 << b_1358954566)) == 0))) {
                    s0_1358954551 = (s0_1358954551 ^ s_1358954549.a0);
                    s1_1358954552 = (s1_1358954552 ^ s_1358954549.a1);
                    }
                    
                    var _ = next_1358954539(s_1358954549);
                    i_1342177285 = addInt(i_1342177285, 1);
                  }
              } while (false);
            } while (false);
            res_1342177287 = addInt(res_1342177287, 1);
          }
      } while (false);
    } while (false);
    s_1358954549.a0 = s0_1358954551;
    s_1358954549.a1 = s1_1358954552;

  
}

function initRand_1358954715(seed_1358954716) {
    var Temporary1;

  var result_1358954717 = [({a0: 0, a1: 0})];

    if (!((seed_1358954716 == 0))) {
    Temporary1 = seed_1358954716;
    }
    else {
    Temporary1 = 2147483647;
    }
    
    var seed_1358954723 = Temporary1;
    result_1358954717[0].a0 = Math.floor(seed_1358954723 / Math.pow(2, 16));
    result_1358954717[0].a1 = (seed_1358954723 & 65535);
    skipRandomNumbers_1358954548(result_1358954717[0]);
    var _ = next_1358954539(result_1358954717[0]);

  return result_1358954717[0];

}

function initRand_1358954740() {
  var result_1358954741 = ({a0: 0, a1: 0});

    var time_1358954742 = ((epochTime_1375735094() * 1000.0) & 2147483647);
    result_1358954741 = nimCopy(result_1358954741, initRand_1358954715(time_1358954742), NTI1358954500);

  return result_1358954741;

}

function randomize_1358954747() {
    state_1358954509[0] = nimCopy(state_1358954509[0], initRand_1358954740(), NTI1358954500);

  
}
randomize_1358954747();
var num_469762057 = [null];
var message_469762058 = [null];

function useState_1426063402(val_1426063403) {
  var result_1426063404 = null;

    result_1426063404 = {alpineState: Alpine.reactive(({val: val_1426063403}))};

  return result_1426063404;

}

function useState_1426063649(val_1426063650) {
  var result_1426063651 = null;

    result_1426063651 = {alpineState: Alpine.reactive(({val: nimCopy(null, val_1426063650, NTI33554439)}))};

  return result_1426063651;

}

function useEffect_1426063699(cb_1426063701) {
    Alpine.effect(((cb_1426063701)));

  
}

function get_1426063373(self_1426063374) {
  var result_1426063375 = 0;

    result_1426063375 = (self_1426063374.alpineState.val);

  return result_1426063375;

}

function get_1426063624(self_1426063625) {
  var result_1426063626 = [];

    result_1426063626 = nimCopy(null, (self_1426063625.alpineState.val), NTI33554439);

  return result_1426063626;

}

function substr_33557906(s_33557907, first_33557908, last_33557909) {
  var result_33557910 = [];

    var first_33557911 = nimMax(first_33557908, 0);
    var L_33557912 = nimMax(addInt(subInt(nimMin(last_33557909, (s_33557907).length - 1), first_33557911), 1), 0);
    result_33557910 = nimCopy(null, mnewString(chckRange(L_33557912, 0, 2147483647)), NTI33554439);
    Label1: do {
      var i_33557917 = 0;
      var colontmp__1442840601 = 0;
      colontmp__1442840601 = subInt(L_33557912, 1);
      var res_1442840602 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_1442840602 <= colontmp__1442840601)) break Label3;
            i_33557917 = res_1442840602;
            result_33557910[chckIndx(i_33557917, 0, (result_33557910).length - 1)] = s_33557907[chckIndx(addInt(i_33557917, first_33557911), 0, (s_33557907).length - 1)];
            res_1442840602 = addInt(res_1442840602, 1);
          }
      } while (false);
    } while (false);

  return result_33557910;

}

function nsuStrip(s_1023412444, leading_1023412445, trailing_1023412446, chars_1023412447) {
          var Temporary5;

  var result_1023412448 = [];

    var first_1023412449 = 0;
    var last_1023412450 = subInt((s_1023412444).length, 1);
    if (leading_1023412445) {
    Label1: do {
        Label2: while (true) {
        if (!((first_1023412449 <= last_1023412450) && (chars_1023412447[s_1023412444[chckIndx(first_1023412449, 0, (s_1023412444).length - 1)]] != undefined))) break Label2;
          first_1023412449 = addInt(first_1023412449, 1);
        }
    } while (false);
    }
    
    if (trailing_1023412446) {
    Label3: do {
        Label4: while (true) {
          if (!(first_1023412449 <= last_1023412450)) Temporary5 = false; else {            Temporary5 = (chars_1023412447[s_1023412444[chckIndx(last_1023412450, 0, (s_1023412444).length - 1)]] != undefined);          }        if (!Temporary5) break Label4;
          last_1023412450 = subInt(last_1023412450, 1);
        }
    } while (false);
    }
    
    result_1023412448 = nimCopy(null, substr_33557906(s_1023412444, first_1023412449, last_1023412450), NTI33554439);

  return result_1023412448;

}

function toString_989855792(self_989855793) {
  var result_989855794 = [];

  BeforeRet: do {
    result_989855794 = nimCopy(null, nsuStrip(self_989855793.value, true, true, ConstSet2), NTI33554439);
    break BeforeRet;
  } while (false);

  return result_989855794;

}

function HEX24_989855795(self_989855796) {
  var result_989855797 = [];

  BeforeRet: do {
    result_989855797 = nimCopy(null, toString_989855792(self_989855796), NTI33554439);
    break BeforeRet;
  } while (false);

  return result_989855797;

}

function sysFatal_218103842(message_218103845) {
    raiseException({message: nimCopy(null, message_218103845, NTI33554439), m_type: NTI33555124, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}

function raiseAssert_218103840(msg_218103841) {
    sysFatal_218103842(msg_218103841);

  
}

function failedAssertImpl_218103864(msg_218103865) {
    raiseAssert_218103840(msg_218103865);

  
}

function rand_1342177406(r_1342177408, max_1342177409) {
  var result_1342177410 = 0;

  BeforeRet: do {
    if ((max_1342177409 == 0)) {
    break BeforeRet;
    }
    else {
      var max_1342177411 = max_1342177409;
      Label1: do {
          Label2: while (true) {
          if (!true) break Label2;
            var x_1342177420 = next_1358954539(r_1342177408);
            if ((x_1342177420 <= ((4294967295 - (4294967295 % max_1342177411)) ))) {
            result_1342177410 = (x_1342177420 % ((max_1342177411 + 1) ));
            break BeforeRet;
            }
            
          }
      } while (false);
    }
    
  } while (false);

  return result_1342177410;

}

function rand_1342177395(r_1342177397, x_1342177398) {
  var result_1342177399 = 0;

    if (!((x_1342177398.a <= x_1342177398.b))) {
    failedAssertImpl_218103864(makeNimstrLit("random.nim(325, 10) `x.a <= x.b` "));
    }
    
    result_1342177399 = (((rand_1342177406(r_1342177397, (((x_1342177398.b >>> 0) - (x_1342177398.a >>> 0)) >>> 0)) + (x_1342177398.a >>> 0)) >>> 0) | 0);

  return result_1342177399;

}

function rand_1342177387(x_1342177389) {
  var result_1342177390 = 0;

    result_1342177390 = rand_1342177395(state_1358954509[0], x_1342177389);

  return result_1342177390;

}

function HEX2EHEX2E_1124074323(a_1124074326, b_1124074327) {
  var result_1124074328 = ({a: 0, b: 0});

    result_1124074328 = nimCopy(result_1124074328, {a: a_1124074326, b: b_1124074327}, NTI788529213);

  return result_1124074328;

}

function sample_1342177368(a_1342177370) {
  var result_1342177371 = 0;

    result_1342177371 = a_1342177370[chckIndx(rand_1342177387(HEX2EHEX2E_1124074323(0, (a_1342177370).length - 1)), 0, (a_1342177370).length - 1)];

  return result_1342177371;

}

function randStr_1342177359(size_1342177360, alphabet_1342177361) {
  var result_1342177362 = [];

    Label1: do {
      var __1342177367 = 0;
      var res_469762076 = 1;
      Label2: do {
          Label3: while (true) {
          if (!(res_469762076 <= size_1342177360)) break Label3;
            __1342177367 = res_469762076;
            addChar(result_1342177362, sample_1342177368(alphabet_1342177361));;
            res_469762076 = addInt(res_469762076, 1);
          }
      } while (false);
    } while (false);

  return result_1342177362;

}

function new_1442840638() {
  var result_1442840641 = null;

  BeforeRet: do {
    var id_1442840642 = randStr_1342177359(10, makeNimstrLit("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"));
    result_1442840641 = {value: [], id: nimCopy(null, id_1442840642, NTI33554439)};
    break BeforeRet;
  } while (false);

  return result_1442840641;

}

function add_989855789(self_989855790, value_989855791) {
    self_989855790.value.push.apply(self_989855790.value, value_989855791);;

  
}

function addXmlChar_989855751(dest_989855752, dest_989855752_Idx, c_989855753) {
    switch (c_989855753) {
    case 38:
      dest_989855752[dest_989855752_Idx].push.apply(dest_989855752[dest_989855752_Idx], makeNimstrLit("&amp;"));;
      break;
    case 60:
      dest_989855752[dest_989855752_Idx].push.apply(dest_989855752[dest_989855752_Idx], makeNimstrLit("&lt;"));;
      break;
    case 62:
      dest_989855752[dest_989855752_Idx].push.apply(dest_989855752[dest_989855752_Idx], makeNimstrLit("&gt;"));;
      break;
    case 34:
      dest_989855752[dest_989855752_Idx].push.apply(dest_989855752[dest_989855752_Idx], makeNimstrLit("&quot;"));;
      break;
    default: 
      addChar(dest_989855752[dest_989855752_Idx], c_989855753);;
      break;
    }

  
}

function xmlEncode_989855754(s_989855755) {
  var result_989855756 = [[]];

    result_989855756[0] = nimCopy(null, mnewString(0), NTI33554439);
    Label1: do {
      var i_989855765 = 0;
      var colontmp__469762080 = 0;
      colontmp__469762080 = subInt((s_989855755).length, 1);
      var res_469762081 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_469762081 <= colontmp__469762080)) break Label3;
            i_989855765 = res_469762081;
            addXmlChar_989855751(result_989855756, 0, s_989855755[chckIndx(i_989855765, 0, (s_989855755).length - 1)]);
            res_469762081 = addInt(res_469762081, 1);
          }
      } while (false);
    } while (false);

  return result_989855756[0];

}

function toString_1442840661(val_1442840663) {
  var result_1442840664 = [];

  BeforeRet: do {
    result_1442840664 = nimCopy(null, xmlEncode_989855754(HEX24_335544323(val_1442840663)), NTI33554439);
    break BeforeRet;
  } while (false);

  return result_1442840664;

}

function toString_989855773(val_989855774) {
  var result_989855775 = [];

  BeforeRet: do {
    result_989855775 = nimCopy(null, xmlEncode_989855754(nsuStrip(val_989855774, true, true, ConstSet3)), NTI33554439);
    break BeforeRet;
  } while (false);

  return result_989855775;

}

function alpineView_1442840578(num_1442840579, text_1442840580) {
  var result_1442840581 = null;

    result_1442840581 = new_1442840638();
    add_989855789(result_1442840581, makeNimstrLit("<button @click=\"incrementNum\">Increment</button>\x0A<p>"));
    add_989855789(result_1442840581, toString_1442840661(num_1442840579));
    add_989855789(result_1442840581, makeNimstrLit("</p>\x0A<input type=\"text\" @change=\"setMessage\">\x0A<p>"));
    add_989855789(result_1442840581, toString_989855773(text_1442840580));
    add_989855789(result_1442840581, makeNimstrLit("</p>\x0A"));

  return result_1442840581;

}

function mount(domId_469762060) {
    
function HEX3Aanonymous_469762062() {
        console.log("=== effect");
        console.log(get_1426063373(num_469762057[0]));
        console.log(toJSStr(get_1426063624(message_469762058[0])));
        dom_469762061.innerHTML = toJSStr(HEX24_989855795(alpineView_1442840578(get_1426063373(num_469762057[0]), get_1426063624(message_469762058[0]))));

      
    }

    var dom_469762061 = document.getElementById(domId_469762060);
    console.log(dom_469762061);
    num_469762057[0] = useState_1426063402(1);
    message_469762058[0] = useState_1426063649(makeNimstrLit("CSR\xE3\x81\x95\xE3\x82\x8C\xE3\x81\xBE\xE3\x81\x97\xE3\x81\x9F"));
    useEffect_1426063699(HEX3Aanonymous_469762062);

  
}

function update_1426063388(self_1426063389, val_1426063390) {
    self_1426063389.alpineState.val = val_1426063390;

  
}

function incrementNum() {
    update_1426063388(num_469762057[0], addInt(get_1426063373(num_469762057[0]), 1));

  
}

function update_1426063635(self_1426063636, val_1426063637) {
    self_1426063636.alpineState.val = val_1426063637;

  
}

function setMessage(event_469762085) {
    console.log(event_469762085.target);
    console.log(event_469762085.target.value);
    update_1426063635(message_469762058[0], cstrToNimstr(event_469762085.target.value));

  
}
