/* Generated by the Nim Compiler v1.6.10 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI33555128 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555130 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555165 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554439 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI33554440 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555164 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555112 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555113 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555120 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555122 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555188 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1124073553 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1124073545 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NNI1124073553 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1124073553.node = NNI1124073553;
var NNI33555188 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555188.node = NNI33555188;
var NNI33555083 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555083.node = NNI33555083;
NTI33555188.base = NTI33555083;
NTI1124073553.base = NTI33555188;
NTI1124073545.base = NTI1124073553;
var NNI33555122 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555122.node = NNI33555122;
var NNI33555120 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555120.node = NNI33555120;
var NNI33555113 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555113.node = NNI33555113;
NTI33555164.base = NTI33555112;
NTI33555165.base = NTI33555112;
var NNI33555112 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555164, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554440, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554439, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554439, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555165, name: "up", sons: null}]};
NTI33555112.node = NNI33555112;
NTI33555112.base = NTI33555083;
NTI33555113.base = NTI33555112;
NTI33555120.base = NTI33555113;
NTI33555122.base = NTI33555120;
var NNI33555130 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555130.node = NNI33555130;
NTI33555130.base = NTI33555113;
var NNI33555128 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555128.node = NNI33555128;
NTI33555128.base = NTI33555113;

function makeNimstrLit(c_33556801) {
      var result = [];
  for (var i = 0; i < c_33556801.length; ++i) {
    result[i] = c_33556801.charCodeAt(i);
  }
  return result;
  

  
}

function mnewString(len_33556893) {
        return new Array(len_33556893);
  

  
}

function toJSStr(s_33556807) {
                    var Temporary5;
            var Temporary7;

  var result_33556808 = null;

    var res_33556842 = newSeq_33556825((s_33556807).length);
    var i_33556843 = 0;
    var j_33556844 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_33556843 < (s_33556807).length)) break Label2;
          var c_33556845 = s_33556807[i_33556843];
          if ((c_33556845 < 128)) {
          res_33556842[j_33556844] = String.fromCharCode(c_33556845);
          i_33556843 += 1;
          }
          else {
            var helper_33556857 = newSeq_33556825(0);
            Label3: do {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556858 = c_33556845.toString(16);
                  if ((((code_33556858) == null ? 0 : (code_33556858).length) == 1)) {
                  helper_33556857.push("%0");;
                  }
                  else {
                  helper_33556857.push("%");;
                  }
                  
                  helper_33556857.push(code_33556858);;
                  i_33556843 += 1;
                    if (((s_33556807).length <= i_33556843)) Temporary5 = true; else {                      Temporary5 = (s_33556807[i_33556843] < 128);                    }                  if (Temporary5) {
                  break Label3;
                  }
                  
                  c_33556845 = s_33556807[i_33556843];
                }
            } while (false);
++excHandler;
            Temporary7 = framePtr;
            try {
            res_33556842[j_33556844] = decodeURIComponent(helper_33556857.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            framePtr = Temporary7;
            res_33556842[j_33556844] = helper_33556857.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Temporary7;
            }
          }
          
          j_33556844 += 1;
        }
    } while (false);
    if (res_33556842.length < j_33556844) { for (var i = res_33556842.length ; i < j_33556844 ; ++i) res_33556842.push(null); }
               else { res_33556842.length = j_33556844; };
    result_33556808 = res_33556842.join("");

  return result_33556808;

}

function raiseException(e_33556667, ename_33556668) {
    e_33556667.name = ename_33556668;
    if ((excHandler == 0)) {
    unhandledException(e_33556667);
    }
    
    throw e_33556667;

  
}

function addInt(a_33556940, b_33556941) {
        var result = a_33556940 + b_33556941;
    checkOverflowInt(result);
    return result;
  

  
}

function chckRange(i_33557189, a_33557190, b_33557191) {
      var Temporary1;

  var result_33557192 = 0;

  BeforeRet: do {
      if (!(a_33557190 <= i_33557189)) Temporary1 = false; else {        Temporary1 = (i_33557189 <= b_33557191);      }    if (Temporary1) {
    result_33557192 = i_33557189;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_33557192;

}

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557140, src_33557141, ti_33557142) {
  var result_33557151 = null;

    switch (ti_33557142.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557131(ti_33557142))) {
      result_33557151 = src_33557141;
      }
      else {
        result_33557151 = [src_33557141[0], src_33557141[1]];
      }
      
      break;
    case 19:
            if (dest_33557140 === null || dest_33557140 === undefined) {
        dest_33557140 = {};
      }
      else {
        for (var key in dest_33557140) { delete dest_33557140[key]; }
      }
      for (var key in src_33557141) { dest_33557140[key] = src_33557141[key]; }
      result_33557151 = dest_33557140;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557142.base == null))) {
      result_33557151 = nimCopy(dest_33557140, src_33557141, ti_33557142.base);
      }
      else {
      if ((ti_33557142.kind == 17)) {
      result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {m_type: ti_33557142} : dest_33557140;
      }
      else {
        result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {} : dest_33557140;
      }
      }
      nimCopyAux(result_33557151, src_33557141, ti_33557142.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_33557141 === null) {
        result_33557151 = null;
      }
      else {
        if (dest_33557140 === null || dest_33557140 === undefined || dest_33557140.length != src_33557141.length) {
          dest_33557140 = new Array(src_33557141.length);
        }
        result_33557151 = dest_33557140;
        for (var i = 0; i < src_33557141.length; ++i) {
          result_33557151[i] = nimCopy(result_33557151[i], src_33557141[i], ti_33557142.base);
        }
      }
    
      break;
    case 28:
            if (src_33557141 !== null) {
        result_33557151 = src_33557141.slice(0);
      }
    
      break;
    default: 
      result_33557151 = src_33557141;
      break;
    }

  return result_33557151;

}

function chckIndx(i_33557184, a_33557185, b_33557186) {
      var Temporary1;

  var result_33557187 = 0;

  BeforeRet: do {
      if (!(a_33557185 <= i_33557184)) Temporary1 = false; else {        Temporary1 = (i_33557184 <= b_33557186);      }    if (Temporary1) {
    result_33557187 = i_33557184;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_33557184, a_33557185, b_33557186);
    }
    
  } while (false);

  return result_33557187;

}

function addChar(x_33557255, c_33557256) {
    x_33557255.push(c_33557256);

  
}

function cstrToNimstr(c_33556804) {
      var ln = c_33556804.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_33556804.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_33556804.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}

function reprAny(p_33557559, p_33557559_Idx, typ_33557560) {
  var result_33557561 = [[]];

    var cl_33557562 = [({recDepth: 0, indent: 0})];
    initReprClosure_33557468(cl_33557562[0]);
    reprAux_33557470(result_33557561, 0, p_33557559, p_33557559_Idx, typ_33557560, cl_33557562[0]);

  return result_33557561[0];

}

function subInt(a_33556944, b_33556945) {
        var result = a_33556944 - b_33556945;
    checkOverflowInt(result);
    return result;
  

  
}

function nimMax(a_33556998, b_33556999) {
    var Temporary1;

  var result_33557000 = 0;

  BeforeRet: do {
    if ((b_33556999 <= a_33556998)) {
    Temporary1 = a_33556998;
    }
    else {
    Temporary1 = b_33556999;
    }
    
    result_33557000 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_33557000;

}

function nimMin(a_33556994, b_33556995) {
    var Temporary1;

  var result_33556996 = 0;

  BeforeRet: do {
    if ((a_33556994 <= b_33556995)) {
    Temporary1 = a_33556994;
    }
    else {
    Temporary1 = b_33556995;
    }
    
    result_33556996 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_33556996;

}
var ConstSet2 = setConstr(32, 9, 11, 13, 10, 12);

function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var objectID_687866018 = [0];

function initReprClosure_33557468(cl_33557469) {
    cl_33557469.recDepth = -1;
    cl_33557469.indent = 0;

  
}

function add_33556419(x_33556420, x_33556420_Idx, y_33556421) {
          if (x_33556420[x_33556420_Idx] === null) { x_33556420[x_33556420_Idx] = []; }
      var off = x_33556420[x_33556420_Idx].length;
      x_33556420[x_33556420_Idx].length += y_33556421.length;
      for (var i = 0; i < y_33556421.length; ++i) {
        x_33556420[x_33556420_Idx][off+i] = y_33556421.charCodeAt(i);
      }
    

  
}

function newSeq_33556825(len_33556827) {
  var result_33556828 = [];

    result_33556828 = new Array(len_33556827); for (var i = 0 ; i < len_33556827 ; ++i) { result_33556828[i] = null; }
  return result_33556828;

}

function unhandledException(e_33556663) {
    var buf_33556664 = [[]];
    if (!(((e_33556663.message).length == 0))) {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_33556664[0].push.apply(buf_33556664[0], e_33556663.message);;
    }
    else {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit(" ["));;
    add_33556419(buf_33556664, 0, e_33556663.name);
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("]\x0A"));;
    var cbuf_33556665 = toJSStr(buf_33556664[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556665);
  }
  else {
    throw cbuf_33556665;
  }
  

  
}

function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI33555122, name: null, trace: [], up: null}, "OverflowDefect");

  
}

function checkOverflowInt(a_33556938) {
        if (a_33556938 > 2147483647 || a_33556938 < -2147483648) raiseOverflow();
  

  
}

function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI33555130, name: null, trace: [], up: null}, "RangeDefect");

  
}

function addInt_251658457(result_251658458, result_251658458_Idx, x_251658459) {
    addInt_251658436(result_251658458, result_251658458_Idx, x_251658459);

  
}

function HEX24_335544323(x_335544324) {
  var result_335544325 = [[]];

    addInt_251658457(result_335544325, 0, x_335544324);

  return result_335544325[0];

}

function isFatPointer_33557131(ti_33557132) {
  var result_33557133 = false;

  BeforeRet: do {
    result_33557133 = !((ConstSet1[ti_33557132.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_33557133;

}

function nimCopyAux(dest_33557144, src_33557145, n_33557146) {
    switch (n_33557146.kind) {
    case 0:
      break;
    case 1:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557146.sons.length; i++) {
      nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i]);
    }
    
      break;
    case 3:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
      for (var i = 0; i < n_33557146.sons.length; ++i) {
        nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i][1]);
      }
    
      break;
    }

  
}

function raiseIndexError(i_33556754, a_33556755, b_33556756) {
    var Temporary1;

    if ((b_33556756 < a_33556755)) {
    Temporary1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Temporary1 = (makeNimstrLit("index ") || []).concat(HEX24_335544323(i_33556754) || [],makeNimstrLit(" not in ") || [],HEX24_335544323(a_33556755) || [],makeNimstrLit(" .. ") || [],HEX24_335544323(b_33556756) || []);
    }
    
    raiseException({message: nimCopy(null, Temporary1, NTI33554439), parent: null, m_type: NTI33555128, name: null, trace: [], up: null}, "IndexDefect");

  
}

function addChars_251658415(result_251658417, result_251658417_Idx, x_251658418, start_251658419, n_251658420) {
    var old_251658421 = (result_251658417[result_251658417_Idx]).length;
    (result_251658417[result_251658417_Idx].length = chckRange(addInt(old_251658421, n_251658420), 0, 2147483647));
    Label1: do {
      var iHEX60gensym4_251658435 = 0;
      var i_1090519065 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1090519065 < n_251658420)) break Label3;
            iHEX60gensym4_251658435 = i_1090519065;
            result_251658417[result_251658417_Idx][chckIndx(addInt(old_251658421, iHEX60gensym4_251658435), 0, (result_251658417[result_251658417_Idx]).length - 1)] = x_251658418.charCodeAt(chckIndx(addInt(start_251658419, iHEX60gensym4_251658435), 0, (x_251658418).length - 1));
            i_1090519065 = addInt(i_1090519065, 1);
          }
      } while (false);
    } while (false);

  
}

function addChars_251658411(result_251658413, result_251658413_Idx, x_251658414) {
    addChars_251658415(result_251658413, result_251658413_Idx, x_251658414, 0, ((x_251658414) == null ? 0 : (x_251658414).length));

  
}

function addInt_251658436(result_251658437, result_251658437_Idx, x_251658438) {
    addChars_251658411(result_251658437, result_251658437_Idx, ((x_251658438) + ""));

  
}

function HEX24_335544326(x_335544327) {
  var result_335544328 = [[]];

    addInt_251658436(result_335544328, 0, x_335544327);

  return result_335544328[0];

}

function reprInt(x_33557363) {
  var result_33557364 = [];

    result_33557364 = nimCopy(null, HEX24_335544326(x_33557363), NTI33554439);

  return result_33557364;

}

function reprChar(x_33557413) {
  var result_33557414 = [];

    result_33557414 = nimCopy(null, makeNimstrLit("\'"), NTI33554439);
    switch (x_33557413) {
    case 34:
      result_33557414.push.apply(result_33557414, makeNimstrLit("\\\""));;
      break;
    case 92:
      result_33557414.push.apply(result_33557414, makeNimstrLit("\\\\"));;
      break;
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      result_33557414.push.apply(result_33557414, (makeNimstrLit("\\") || []).concat(reprInt(x_33557413) || []));;
      break;
    default: 
      addChar(result_33557414, x_33557413);;
      break;
    }
    result_33557414.push.apply(result_33557414, makeNimstrLit("\'"));;

  return result_33557414;

}

function reprBool(x_33557382) {
  var result_33557383 = [];

    if (x_33557382) {
    result_33557383 = nimCopy(null, makeNimstrLit("true"), NTI33554439);
    }
    else {
      result_33557383 = nimCopy(null, makeNimstrLit("false"), NTI33554439);
    }
    

  return result_33557383;

}

function nimFloatToString_352321654(a_352321655) {
  var result_352321656 = null;

        function nimOnlyDigitsOrMinus(n) {
      return n.toString().match(/^-?\d+$/);
    }
    if (Number.isSafeInteger(a_352321655))
      result_352321656 = a_352321655 === 0 && 1 / a_352321655 < 0 ? "-0.0" : a_352321655+".0"
    else {
      result_352321656 = a_352321655+""
      if(nimOnlyDigitsOrMinus(result_352321656)){
        result_352321656 = a_352321655+".0"
      }
    }
  

  return result_352321656;

}

function addFloat_33557372(result_33557374, result_33557374_Idx, x_33557375) {
    add_33556419(result_33557374, result_33557374_Idx, nimFloatToString_352321654(x_33557375));

  
}

function HEX24_33557368(x_33557370) {
  var result_33557371 = [[]];

    addFloat_33557372(result_33557371, 0, x_33557370);

  return result_33557371[0];

}

function reprFloat(x_33557366) {
  var result_33557367 = [];

    result_33557367 = nimCopy(null, HEX24_33557368(x_33557366), NTI33554439);

  return result_33557367;

}

function reprStrAux_33557428(result_33557430, result_33557430_Idx, s_33557431, len_33557432) {
    result_33557430[result_33557430_Idx].push.apply(result_33557430[result_33557430_Idx], makeNimstrLit("\""));;
    Label1: do {
      var i_33557437 = 0;
      var colontmp__1090519070 = 0;
      colontmp__1090519070 = (len_33557432 - 1);
      var res_1090519071 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_1090519071 <= colontmp__1090519070)) break Label3;
            i_33557437 = res_1090519071;
            var c_33557438 = s_33557431[i_33557437];
            switch (c_33557438) {
            case 34:
              result_33557430[result_33557430_Idx].push.apply(result_33557430[result_33557430_Idx], makeNimstrLit("\\\""));;
              break;
            case 92:
              result_33557430[result_33557430_Idx].push.apply(result_33557430[result_33557430_Idx], makeNimstrLit("\\\\"));;
              break;
            case 127:
            case 128:
            case 129:
            case 130:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 160:
            case 161:
            case 162:
            case 163:
            case 164:
            case 165:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 178:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
            case 195:
            case 196:
            case 197:
            case 198:
            case 199:
            case 200:
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
            case 212:
            case 213:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 220:
            case 221:
            case 222:
            case 223:
            case 224:
            case 225:
            case 226:
            case 227:
            case 228:
            case 229:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 236:
            case 237:
            case 238:
            case 239:
            case 240:
            case 241:
            case 242:
            case 243:
            case 244:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
            case 250:
            case 251:
            case 252:
            case 253:
            case 254:
            case 255:
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
              result_33557430[result_33557430_Idx].push.apply(result_33557430[result_33557430_Idx], (makeNimstrLit("\\") || []).concat(reprInt(c_33557438) || []));;
              break;
            default: 
              addChar(result_33557430[result_33557430_Idx], c_33557438);;
              break;
            }
            res_1090519071 += 1;
          }
      } while (false);
    } while (false);
    result_33557430[result_33557430_Idx].push.apply(result_33557430[result_33557430_Idx], makeNimstrLit("\""));;

  
}

function reprStr(s_33557426) {
  var result_33557427 = [[]];

    reprStrAux_33557428(result_33557427, 0, s_33557426, (s_33557426).length);

  return result_33557427[0];

}

function reprStrAux_33557538(result_33557540, result_33557540_Idx, s_33557541, len_33557542) {
    result_33557540[result_33557540_Idx].push.apply(result_33557540[result_33557540_Idx], makeNimstrLit("\""));;
    Label1: do {
      var i_33557547 = 0;
      var colontmp__1090519074 = 0;
      colontmp__1090519074 = (len_33557542 - 1);
      var res_1090519075 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_1090519075 <= colontmp__1090519074)) break Label3;
            i_33557547 = res_1090519075;
            var c_33557548 = s_33557541.charCodeAt(i_33557547);
            switch (c_33557548) {
            case 34:
              result_33557540[result_33557540_Idx].push.apply(result_33557540[result_33557540_Idx], makeNimstrLit("\\\""));;
              break;
            case 92:
              result_33557540[result_33557540_Idx].push.apply(result_33557540[result_33557540_Idx], makeNimstrLit("\\\\"));;
              break;
            case 127:
            case 128:
            case 129:
            case 130:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 160:
            case 161:
            case 162:
            case 163:
            case 164:
            case 165:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 178:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
            case 195:
            case 196:
            case 197:
            case 198:
            case 199:
            case 200:
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
            case 212:
            case 213:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 220:
            case 221:
            case 222:
            case 223:
            case 224:
            case 225:
            case 226:
            case 227:
            case 228:
            case 229:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 236:
            case 237:
            case 238:
            case 239:
            case 240:
            case 241:
            case 242:
            case 243:
            case 244:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
            case 250:
            case 251:
            case 252:
            case 253:
            case 254:
            case 255:
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
              result_33557540[result_33557540_Idx].push.apply(result_33557540[result_33557540_Idx], (makeNimstrLit("\\") || []).concat(reprInt(c_33557548) || []));;
              break;
            default: 
              addChar(result_33557540[result_33557540_Idx], c_33557548);;
              break;
            }
            res_1090519075 += 1;
          }
      } while (false);
    } while (false);
    result_33557540[result_33557540_Idx].push.apply(result_33557540[result_33557540_Idx], makeNimstrLit("\""));;

  
}

function reprEnum(e_33557385, typ_33557386) {
  var result_33557387 = [];

    var tmp_33557388 = false;
    var item_33557389 = typ_33557386.node.sons[e_33557385];
    tmp_33557388 = item_33557389 !== undefined
    if (tmp_33557388) {
    result_33557387 = nimCopy(null, makeNimstrLit(item_33557389.name), NTI33554439);
    }
    else {
      result_33557387 = nimCopy(null, (HEX24_335544323(e_33557385) || []).concat(makeNimstrLit(" (invalid data!)") || []), NTI33554439);
    }
    

  return result_33557387;

}

function addSetElem_33557442(result_33557443, result_33557443_Idx, elem_33557444, typ_33557445) {
    switch (typ_33557445.kind) {
    case 14:
      result_33557443[result_33557443_Idx].push.apply(result_33557443[result_33557443_Idx], reprEnum(elem_33557444, typ_33557445));;
      break;
    case 1:
      result_33557443[result_33557443_Idx].push.apply(result_33557443[result_33557443_Idx], reprBool((!!(elem_33557444))));;
      break;
    case 2:
      result_33557443[result_33557443_Idx].push.apply(result_33557443[result_33557443_Idx], reprChar(elem_33557444));;
      break;
    case 20:
      addSetElem_33557442(result_33557443, result_33557443_Idx, elem_33557444, typ_33557445.base);
      break;
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 41:
    case 42:
      result_33557443[result_33557443_Idx].push.apply(result_33557443[result_33557443_Idx], reprInt(elem_33557444));;
      break;
    default: 
      result_33557443[result_33557443_Idx].push.apply(result_33557443[result_33557443_Idx], makeNimstrLit(" (invalid data!)"));;
      break;
    }

  
}

function reprSetAux_33557455(result_33557456, result_33557456_Idx, s_33557457, typ_33557458) {
    result_33557456[result_33557456_Idx].push.apply(result_33557456[result_33557456_Idx], makeNimstrLit("{"));;
    var first_33557459 = true;
    Label1: do {
      var el_33557460 = 0;
      var len_1090519079 = 0;
      var yieldRes_1090519080 = 0;
      var i_1090519081 = 0;
        var setObjKeys = Object.getOwnPropertyNames(s_33557457);
  len_1090519079 = setObjKeys.length;
  
      Label2: do {
          Label3: while (true) {
          if (!(i_1090519081 < len_1090519079)) break Label3;
            yieldRes_1090519080 = parseInt(setObjKeys[i_1090519081],10);

            el_33557460 = yieldRes_1090519080;
            if (first_33557459) {
            first_33557459 = false;
            }
            else {
            result_33557456[result_33557456_Idx].push.apply(result_33557456[result_33557456_Idx], makeNimstrLit(", "));;
            }
            
            addSetElem_33557442(result_33557456, result_33557456_Idx, el_33557460, typ_33557458.base);
            i_1090519081 += 1;
          }
      } while (false);
    } while (false);
    result_33557456[result_33557456_Idx].push.apply(result_33557456[result_33557456_Idx], makeNimstrLit("}"));;

  
}

function reprSet(e_33557462, typ_33557463) {
  var result_33557464 = [[]];

    reprSetAux_33557455(result_33557464, 0, e_33557462, typ_33557463);

  return result_33557464[0];

}

function reprRecordAux_33557504(result_33557505, result_33557505_Idx, o_33557506, o_33557506_Idx, typ_33557507, cl_33557508) {
    result_33557505[result_33557505_Idx].push.apply(result_33557505[result_33557505_Idx], makeNimstrLit("["));;
    var first_33557509 = true;
    var val_33557510 = o_33557506, val_33557510_Idx = o_33557506_Idx;
    if ((typ_33557507.node.len == 0)) {
    var key_33557511 = typ_33557507.node.name;
    result_33557505[result_33557505_Idx].push.apply(result_33557505[result_33557505_Idx], (cstrToNimstr(key_33557511) || []).concat(makeNimstrLit(" = ") || []));;
    val_33557510 = o_33557506[key_33557511];

    reprAux_33557470(result_33557505, result_33557505_Idx, val_33557510, val_33557510_Idx, typ_33557507.node.typ, cl_33557508);
    }
    else {
      Label1: do {
        var i_33557516 = 0;
        var colontmp__1090519084 = 0;
        colontmp__1090519084 = (typ_33557507.node.len - 1);
        var res_1090519085 = 0;
        Label2: do {
            Label3: while (true) {
            if (!(res_1090519085 <= colontmp__1090519084)) break Label3;
              i_33557516 = res_1090519085;
              if (first_33557509) {
              first_33557509 = false;
              }
              else {
              result_33557505[result_33557505_Idx].push.apply(result_33557505[result_33557505_Idx], makeNimstrLit(",\x0A"));;
              }
              
              var key_33557517 = typ_33557507.node.sons[i_33557516].name;
              result_33557505[result_33557505_Idx].push.apply(result_33557505[result_33557505_Idx], (cstrToNimstr(key_33557517) || []).concat(makeNimstrLit(" = ") || []));;
              val_33557510 = o_33557506[key_33557517];

              reprAux_33557470(result_33557505, result_33557505_Idx, val_33557510, val_33557510_Idx, typ_33557507.node.sons[i_33557516].typ, cl_33557508);
              res_1090519085 += 1;
            }
        } while (false);
      } while (false);
    }
    
    result_33557505[result_33557505_Idx].push.apply(result_33557505[result_33557505_Idx], makeNimstrLit("]"));;

  
}

function reprRecord(o_33557519, o_33557519_Idx, typ_33557520, cl_33557521) {
  var result_33557522 = [[]];

    reprRecordAux_33557504(result_33557522, 0, o_33557519, o_33557519_Idx, typ_33557520, cl_33557521);

  return result_33557522[0];

}

function reprArray(a_33557476, a_33557476_Idx, typ_33557477, cl_33557478) {
    var Temporary1;

  var result_33557479 = [[]];

    if ((typ_33557477.kind == 24)) {
    Temporary1 = makeNimstrLit("@[");
    }
    else {
    Temporary1 = makeNimstrLit("[");
    }
    
    result_33557479[0] = nimCopy(null, Temporary1, NTI33554439);
    var len_33557484 = 0;
    var i_33557485 = 0;
    len_33557484 = a_33557476.length;

    var dereffed_33557486 = a_33557476, dereffed_33557486_Idx = a_33557476_Idx;
    Label2: do {
      var i_33557491 = 0;
      var colontmp__1090519088 = 0;
      colontmp__1090519088 = (len_33557484 - 1);
      var res_1090519089 = 0;
      Label3: do {
          Label4: while (true) {
          if (!(res_1090519089 <= colontmp__1090519088)) break Label4;
            i_33557491 = res_1090519089;
            if ((0 < i_33557491)) {
            result_33557479[0].push.apply(result_33557479[0], makeNimstrLit(", "));;
            }
            
                dereffed_33557486_Idx = i_33557491;
    dereffed_33557486 = a_33557476[dereffed_33557486_Idx];
    
            reprAux_33557470(result_33557479, 0, dereffed_33557486, dereffed_33557486_Idx, typ_33557477.base, cl_33557478);
            res_1090519089 += 1;
          }
      } while (false);
    } while (false);
    result_33557479[0].push.apply(result_33557479[0], makeNimstrLit("]"));;

  return result_33557479[0];

}

function reprPointer(p_33557378, p_33557378_Idx) {
  var result_33557379 = [];

    var tmp_33557380 = 0;
    tmp_33557380 = p_33557378_Idx || 0;
    result_33557379 = nimCopy(null, HEX24_335544323(tmp_33557380), NTI33554439);

  return result_33557379;

}

function isPointedToNil_33557492(p_33557493, p_33557493_Idx) {
  var result_33557494 = false;

    if (p_33557493 === null) {result_33557494 = true};


  return result_33557494;

}

function reprRef_33557495(result_33557496, result_33557496_Idx, p_33557497, p_33557497_Idx, typ_33557498, cl_33557499) {
  BeforeRet: do {
    if (isPointedToNil_33557492(p_33557497, p_33557497_Idx)) {
    result_33557496[result_33557496_Idx].push.apply(result_33557496[result_33557496_Idx], makeNimstrLit("nil"));;
    break BeforeRet;
    }
    
    result_33557496[result_33557496_Idx].push.apply(result_33557496[result_33557496_Idx], (makeNimstrLit("ref ") || []).concat(reprPointer(p_33557497, p_33557497_Idx) || []));;
    result_33557496[result_33557496_Idx].push.apply(result_33557496[result_33557496_Idx], makeNimstrLit(" --> "));;
    if (!((typ_33557498.base.kind == 16))) {
        if (p_33557497 != null && p_33557497.length > 0) {
      p_33557497 = p_33557497[p_33557497_Idx];
    }
    
    }
    
    reprAux_33557470(result_33557496, result_33557496_Idx, p_33557497, p_33557497_Idx, typ_33557498.base, cl_33557499);
  } while (false);

  
}

function reprJsonStringify(p_33557524) {
  var result_33557525 = [];

    var tmp_33557526 = null;
    tmp_33557526 = JSON.stringify(p_33557524);

    result_33557525 = nimCopy(null, cstrToNimstr(tmp_33557526), NTI33554439);

  return result_33557525;

}

function reprAux_33557470(result_33557471, result_33557471_Idx, p_33557472, p_33557472_Idx, typ_33557473, cl_33557474) {
  BeforeRet: do {
    if ((cl_33557474.recDepth == 0)) {
    result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], makeNimstrLit("..."));;
    break BeforeRet;
    }
    
    cl_33557474.recDepth -= 1;
    switch (typ_33557473.kind) {
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], reprInt(p_33557472, p_33557472_Idx));;
      break;
    case 2:
      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], reprChar(p_33557472, p_33557472_Idx));;
      break;
    case 1:
      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], reprBool(p_33557472, p_33557472_Idx));;
      break;
    case 36:
    case 37:
    case 38:
    case 39:
      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], reprFloat(p_33557472, p_33557472_Idx));;
      break;
    case 28:
      var fp_33557536 = 0;
      fp_33557536 = p_33557472;

      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], reprStr(p_33557472, p_33557472_Idx));;
      break;
    case 29:
      var fp_33557537 = null;
      fp_33557537 = p_33557472;

      if ((fp_33557537 == null)) {
      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], makeNimstrLit("nil"));;
      }
      else {
      reprStrAux_33557538(result_33557471, result_33557471_Idx, fp_33557537, ((fp_33557537) == null ? 0 : (fp_33557537).length));
      }
      
      break;
    case 14:
    case 15:
      var fp_33557552 = 0;
      fp_33557552 = p_33557472;

      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], reprEnum(fp_33557552, typ_33557473));;
      break;
    case 19:
      var fp_33557553 = 0;
      fp_33557553 = p_33557472;

      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], reprSet(fp_33557553, typ_33557473));;
      break;
    case 20:
      reprAux_33557470(result_33557471, result_33557471_Idx, p_33557472, p_33557472_Idx, typ_33557473.base, cl_33557474);
      break;
    case 17:
    case 18:
      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], reprRecord(p_33557472, p_33557472_Idx, typ_33557473, cl_33557474));;
      break;
    case 16:
    case 4:
    case 24:
      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], reprArray(p_33557472, p_33557472_Idx, typ_33557473, cl_33557474));;
      break;
    case 26:
      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], reprPointer(p_33557472, p_33557472_Idx));;
      break;
    case 21:
    case 22:
      reprRef_33557495(result_33557471, result_33557471_Idx, p_33557472, p_33557472_Idx, typ_33557473, cl_33557474);
      break;
    case 25:
      if (isPointedToNil_33557492(p_33557472, p_33557472_Idx)) {
      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], makeNimstrLit("nil"));;
      }
      else {
      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], reprPointer(p_33557472, p_33557472_Idx));;
      }
      
      break;
    default: 
      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], (makeNimstrLit("(invalid data!)") || []).concat(reprJsonStringify(p_33557472, p_33557472_Idx) || []));;
      break;
    }
    cl_33557474.recDepth += 1;
  } while (false);

  
}

function render(a_1090519056, b_1090519057) {
    render(h(a_1090519056), toJSStr(reprAny(b_1090519057, null, NTI1124073545)));;

  
}

function substr_33557906(s_33557907, first_33557908, last_33557909) {
  var result_33557910 = [];

    var first_33557911 = nimMax(first_33557908, 0);
    var L_33557912 = nimMax(addInt(subInt(nimMin(last_33557909, (s_33557907).length - 1), first_33557911), 1), 0);
    result_33557910 = nimCopy(null, mnewString(chckRange(L_33557912, 0, 2147483647)), NTI33554439);
    Label1: do {
      var i_33557917 = 0;
      var colontmp__469762076 = 0;
      colontmp__469762076 = subInt(L_33557912, 1);
      var res_469762077 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_469762077 <= colontmp__469762076)) break Label3;
            i_33557917 = res_469762077;
            result_33557910[chckIndx(i_33557917, 0, (result_33557910).length - 1)] = s_33557907[chckIndx(addInt(i_33557917, first_33557911), 0, (s_33557907).length - 1)];
            res_469762077 = addInt(res_469762077, 1);
          }
      } while (false);
    } while (false);

  return result_33557910;

}

function nsuStrip(s_671090908, leading_671090909, trailing_671090910, chars_671090911) {
          var Temporary5;

  var result_671090912 = [];

    var first_671090913 = 0;
    var last_671090914 = subInt((s_671090908).length, 1);
    if (leading_671090909) {
    Label1: do {
        Label2: while (true) {
        if (!((first_671090913 <= last_671090914) && (chars_671090911[s_671090908[chckIndx(first_671090913, 0, (s_671090908).length - 1)]] != undefined))) break Label2;
          first_671090913 = addInt(first_671090913, 1);
        }
    } while (false);
    }
    
    if (trailing_671090910) {
    Label3: do {
        Label4: while (true) {
          if (!(first_671090913 <= last_671090914)) Temporary5 = false; else {            Temporary5 = (chars_671090911[s_671090908[chckIndx(last_671090914, 0, (s_671090908).length - 1)]] != undefined);          }        if (!Temporary5) break Label4;
          last_671090914 = subInt(last_671090914, 1);
        }
    } while (false);
    }
    
    result_671090912 = nimCopy(null, substr_33557906(s_671090908, first_671090913, last_671090914), NTI33554439);

  return result_671090912;

}

function hello() {
  var result_469762055 = [];

    var msg_469762056 = makeNimstrLit("Hello");
    result_469762055 = nimCopy(null, [], NTI33554439);
    result_469762055.push.apply(result_469762055, makeNimstrLit("<h1>"));;
    result_469762055.push.apply(result_469762055, nsuStrip(msg_469762056, true, true, ConstSet2));;
    result_469762055.push.apply(result_469762055, makeNimstrLit("</h1>\x0A"));;

  return result_469762055;

}

function main() {
    rawEcho(makeNimstrLit("nim load"));
    const { h, render } = dyo;
    /* @jsx h */
    render(hello, document.getElementById(("app")));

  
}
main();
